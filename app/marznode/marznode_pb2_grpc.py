# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from app.marznode import marznode_pb2 as app_dot_marznode_dot_marznode__pb2


class MarzServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SyncUsers = channel.stream_unary(
                '/marznode.MarzService/SyncUsers',
                request_serializer=app_dot_marznode_dot_marznode__pb2.UserData.SerializeToString,
                response_deserializer=app_dot_marznode_dot_marznode__pb2.Empty.FromString,
                )
        self.RepopulateUsers = channel.unary_unary(
                '/marznode.MarzService/RepopulateUsers',
                request_serializer=app_dot_marznode_dot_marznode__pb2.UsersData.SerializeToString,
                response_deserializer=app_dot_marznode_dot_marznode__pb2.Empty.FromString,
                )
        self.FetchInbounds = channel.unary_unary(
                '/marznode.MarzService/FetchInbounds',
                request_serializer=app_dot_marznode_dot_marznode__pb2.Empty.SerializeToString,
                response_deserializer=app_dot_marznode_dot_marznode__pb2.InboundsResponse.FromString,
                )
        self.FetchUsersStats = channel.unary_unary(
                '/marznode.MarzService/FetchUsersStats',
                request_serializer=app_dot_marznode_dot_marznode__pb2.Empty.SerializeToString,
                response_deserializer=app_dot_marznode_dot_marznode__pb2.UsersStats.FromString,
                )
        self.FetchXrayConfig = channel.unary_unary(
                '/marznode.MarzService/FetchXrayConfig',
                request_serializer=app_dot_marznode_dot_marznode__pb2.Empty.SerializeToString,
                response_deserializer=app_dot_marznode_dot_marznode__pb2.XrayConfig.FromString,
                )
        self.RestartXray = channel.unary_unary(
                '/marznode.MarzService/RestartXray',
                request_serializer=app_dot_marznode_dot_marznode__pb2.XrayConfig.SerializeToString,
                response_deserializer=app_dot_marznode_dot_marznode__pb2.InboundsResponse.FromString,
                )
        self.StreamXrayLogs = channel.unary_stream(
                '/marznode.MarzService/StreamXrayLogs',
                request_serializer=app_dot_marznode_dot_marznode__pb2.XrayLogsRequest.SerializeToString,
                response_deserializer=app_dot_marznode_dot_marznode__pb2.LogLine.FromString,
                )


class MarzServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SyncUsers(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RepopulateUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchInbounds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchUsersStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchXrayConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RestartXray(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamXrayLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MarzServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SyncUsers': grpc.stream_unary_rpc_method_handler(
                    servicer.SyncUsers,
                    request_deserializer=app_dot_marznode_dot_marznode__pb2.UserData.FromString,
                    response_serializer=app_dot_marznode_dot_marznode__pb2.Empty.SerializeToString,
            ),
            'RepopulateUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.RepopulateUsers,
                    request_deserializer=app_dot_marznode_dot_marznode__pb2.UsersData.FromString,
                    response_serializer=app_dot_marznode_dot_marznode__pb2.Empty.SerializeToString,
            ),
            'FetchInbounds': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchInbounds,
                    request_deserializer=app_dot_marznode_dot_marznode__pb2.Empty.FromString,
                    response_serializer=app_dot_marznode_dot_marznode__pb2.InboundsResponse.SerializeToString,
            ),
            'FetchUsersStats': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchUsersStats,
                    request_deserializer=app_dot_marznode_dot_marznode__pb2.Empty.FromString,
                    response_serializer=app_dot_marznode_dot_marznode__pb2.UsersStats.SerializeToString,
            ),
            'FetchXrayConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchXrayConfig,
                    request_deserializer=app_dot_marznode_dot_marznode__pb2.Empty.FromString,
                    response_serializer=app_dot_marznode_dot_marznode__pb2.XrayConfig.SerializeToString,
            ),
            'RestartXray': grpc.unary_unary_rpc_method_handler(
                    servicer.RestartXray,
                    request_deserializer=app_dot_marznode_dot_marznode__pb2.XrayConfig.FromString,
                    response_serializer=app_dot_marznode_dot_marznode__pb2.InboundsResponse.SerializeToString,
            ),
            'StreamXrayLogs': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamXrayLogs,
                    request_deserializer=app_dot_marznode_dot_marznode__pb2.XrayLogsRequest.FromString,
                    response_serializer=app_dot_marznode_dot_marznode__pb2.LogLine.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'marznode.MarzService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MarzService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SyncUsers(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/marznode.MarzService/SyncUsers',
            app_dot_marznode_dot_marznode__pb2.UserData.SerializeToString,
            app_dot_marznode_dot_marznode__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RepopulateUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/marznode.MarzService/RepopulateUsers',
            app_dot_marznode_dot_marznode__pb2.UsersData.SerializeToString,
            app_dot_marznode_dot_marznode__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchInbounds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/marznode.MarzService/FetchInbounds',
            app_dot_marznode_dot_marznode__pb2.Empty.SerializeToString,
            app_dot_marznode_dot_marznode__pb2.InboundsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchUsersStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/marznode.MarzService/FetchUsersStats',
            app_dot_marznode_dot_marznode__pb2.Empty.SerializeToString,
            app_dot_marznode_dot_marznode__pb2.UsersStats.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchXrayConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/marznode.MarzService/FetchXrayConfig',
            app_dot_marznode_dot_marznode__pb2.Empty.SerializeToString,
            app_dot_marznode_dot_marznode__pb2.XrayConfig.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RestartXray(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/marznode.MarzService/RestartXray',
            app_dot_marznode_dot_marznode__pb2.XrayConfig.SerializeToString,
            app_dot_marznode_dot_marznode__pb2.InboundsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamXrayLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/marznode.MarzService/StreamXrayLogs',
            app_dot_marznode_dot_marznode__pb2.XrayLogsRequest.SerializeToString,
            app_dot_marznode_dot_marznode__pb2.LogLine.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
